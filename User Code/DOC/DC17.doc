=============================================================================
List of generated methods in project: DC17

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "PWMRed"    (bean PWMJoe)
   - PWMRed_Enable -This method enables the bean - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PWMRed_Disable -This method disables the bean - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - PWMRed_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.

Module "PWMGreen"  (bean PWMJoe)
   - PWMGreen_Enable -This method enables the bean - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PWMGreen_Disable -This method disables the bean - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - PWMGreen_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.

Module "PWMBlue"   (bean PWMJoe)
   - PWMBlue_Enable -This method enables the bean - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PWMBlue_Disable -This method disables the bean - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - PWMBlue_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - 
                FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.

Module "MICOUT"    (bean ADC)
   - MICOUT_Enable -Enables A/D converter bean. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - MICOUT_Disable -Disables A/D converter bean. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - MICOUT_Measure -This method performs one measurement on all channels that are set in the bean inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - MICOUT_GetValue16 -This method returns the last measured values of all channels justified to the left. Compared with 
                <GetValue> method this method returns more accurate result if the <number of conversions> is greater than 1 and 
                <AD resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "MICPWR"    (bean BitIO)
   - MICPWR_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - MICPWR_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "TI0"       (bean TimerInt)
   - TI0_Enable -This method enables the bean - it starts the timer. Events may be generated (<DisableEvent>/<EnableEvent>).
   - TI0_Disable -This method disables the bean - it stops the timer. No events will be generated.

Module "TI1"       (bean TimerInt)
   - TI1_Enable -This method enables the bean - it starts the timer. Events may be generated (<DisableEvent>/<EnableEvent>).
   - TI1_Disable -This method disables the bean - it stops the timer. No events will be generated.

Module "TIPIT"     (bean TimerInt)
   - TIPIT_Enable -This method enables the bean - it starts the timer. Events may be generated (<DisableEvent>/<EnableEvent>).
   - TIPIT_Disable -This method disables the bean - it stops the timer. No events will be generated.

Module "DFR1"      (bean DSP_Func_DFR)
   - DFR1_dfr16FIR -The method computes a Finite Impulse Response, (FIR), filter for a vector of fractional data values.   
                Prior to any call to fir, the FIR filter data structure referred to by the first parameter pFIR must be 
                allocated and initialized. This allocation and initialization can be done either statically by declaring a 
                dfr16_tFirStruct data structure and then initializing it with a call to dfr16FIRInit, or dynamically by calling 
                dfr16FIRCreate.
   - DFR1_dfr16FIRCreate -The method performs memory allocation and initialization for the fir filter function.
   - DFR1_dfr16FIRHistory -The method reinitializes the Finite Impulse Response, (FIR), filter history buffer data values. 
                Prior to any call to firHistory, the FIR filter must be initialized via a call to firCreate. The firHistory 
                function uses the private data structure established by firCreate to establish the past history of data 
                elements required by the FIR filter computation. The argument pX must point to n fractional data elements, 
                where n is the number of coefficients used to establish the FIR filter in the call to firCreate.
   - DFR1_dfr16FIRDestroy -The method deallocates the data structure(s) initially allocated by firCreate.
   - DFR1_dfr16FIRInit -The method initializes the fir filter function from a previously allocated dfr16_tFirStruct data 
                structure. Typically, this dfr16_tFirStruct data structure is allocated statically by the caller prior to the 
                firInit call. However, firCreate also uses firInit to initialize the dfr16_tFirStruct that it dynamically 
                allocates.
   - DFR1_dfr16FIRs -The method computes a Finite Impulse Response (FIR) filter for a single fractional data value.   Prior to 
                any call to fir, the FIR filter data structure referred to by the first parameter pFIR must be allocated and 
                initialized. This allocation and initialization can be done either statically by declaring a dfr16_tFirStruct 
                data structure and then initializing it with a call to dfr16FIRInit, or dynamically by calling dfr16FIRCreate.
   - DFR1_dfr16FIRInt -The method computes an interpolating Finite Impulse Response, (FIR), filter for a vector of fractional 
                data values.   Prior to any call to firint, the FIR filter data structure referred to by the first parameter 
                pFIRINT must be allocated and initialized. This allocation and initialization can be done either statically by 
                declaring a dfr16_tFirIntStruct data structure and then initializing it with a call to dfr16FIRIntInit, or 
                dynamically by calling dfr16FIRIntCreate.
   - DFR1_dfr16FIRIntCreate -The method performs the initialization for the firint filter function. The firintCreate function 
                allocates and initializes a data structure, dfr16_tFirIntStruct, which is used by firint to preserve the 
                filter’s state between calls. The data structure preserves the pC pointer to the vector of interpolating FIR 
                filter coefficients. The function firintCreate also allocates a buffer to save the past history of n data 
                elements required by the interpolating FIR filter computation; a pointer to this buffer is stored in the data 
                structure returned by firint. So that firint can achieve maximum efficiency using modulo addressing, 
                firintCreate allocates the history buffer from the system heap such that its address starts on a k-bit boundary,
                where k=log2(n).
   - DFR1_dfr16FIRIntDestroy -The method deallocates the data structure initially allocated by firintCreate.
   - DFR1_dfr16FIRIntInit -The method initializes the firint filter function from a previously allocated dfr16_tFirIntStruct 
                data structure. Typically, this dfr16_tFirIntStruct data structure is allocated statically by the caller prior 
                to the firintInit call. However, firintCreate also uses firintInit to initialize the dfr16_tFirIntStruct that 
                it dynamically allocates.
   - DFR1_dfr16FIRDec -The method computes a decimating Finite Impulse Response, (FIR), filter for a vector of fractional data 
                values.   Prior to any call to firdec, the FIR filter data structure referred to by the first parameter pFIRDEC 
                must be allocated and initialized. This allocation and initialization can be done either statically by 
                declaring a dfr16_tFirDecStruct data structure and then initializing it with a call to dfr16FIRDecInit, or 
                dynamically by calling dfr16FIRDecCreate.
   - DFR1_dfr16FIRDecCreate -The method performs the initialization for the firdec filter function. The function firdecCreate 
                allocates and initializes a data structure, dfr16_tFirDecStruct, which is used by firdec to preserve the 
                filter’s state between calls. The data structure preserves the pC pointer to the vector of decimating FIR 
                filter coefficients. The firdecCreate function also allocates a buffer to save the past history of n data 
                elements required by the decimating FIR filter computation; a pointer to this buffer is stored in the data 
                structure pointed to by pFIRDEC. So firdec can achieve maximum efficiency using modulo addressing, firdecCreate 
                allocates the history buffer from the system heap such that its address starts on a k-bit boundary, where 
                k=log2(n).
   - DFR1_dfr16FIRDecDestroy -The method deallocates the data structure initially allocated by firdecCreate.
   - DFR1_dfr16FIRDecInit -The method initializes the firdec filter function from a previously allocated dfr16_tFirDecStruct 
                data structure. Typically, this dfr16_tFirDecStruct data structure is allocated statically by the caller prior 
                to the firdecInit call. However, firdecCreate also uses firdecInit to initialize the dfr16_tFirDecStruct that 
                it dynamically allocates.
   - DFR1_dfr16IIR -The method computes an Infinite Impulse Response, (IIR), filter for a vector of fractional data values 
                using a cascade filter of biquad coefficients.   Prior to any call to iir, the IIR filter data structure 
                referred to by the first parameter pIIR must be allocated and initialized. This allocation and initialization 
                can be done either statically by declaring a dfr16_tIirStruct data structure and then initializing it with a 
                call to dfr16IIRInit, or dynamically by calling dfr16IIRCreate.
   - DFR1_dfr16IIRCreate -The method performs the initialization for the cascade iir filter function. The function iirCreate 
                allocates and initializes a data structure, which is used by iir to preserve the filter’s state between calls. 
                The data structure preserves the pC pointer to the linearized vector of n biquad IIR filter coefficients. The 
                iirCreate function also allocates a buffer to save the past history of two data elements (as shown in the 
                formula below using variable “w”) per biquad required by the cascade IIR filter computation; a pointer to this 
                buffer is stored in the private data structure. So that iir can achieve maximum efficiency using modulo 
                addressing, iirCreate allocates the history buffer from the system heap such that its address starts on a k-bit 
                boundary, where: k = log(2)(2 * n).
   - DFR1_dfr16IIRDestroy -The method deallocates the data structure(s) initially allocated by iirCreate.
   - DFR1_dfr16IIRInit -The method performs the initialization for the cascade iir filter function and initializes the function 
                from a previously-allocated dfr16_tIirStruct data structure. Typically, the dfr16_tIirStruct data structure is 
                allocated statically by the caller prior to the iirInit call. The iirCreate function also uses iirInit to 
                initialize the dfr16_tIirStruct that it dynamically allocates.
   - DFR1_dfr16AutoCorr -The method computes the first nz points of auto-correlation of a vector of fractional data values.
   - DFR1_dfr16Corr -The method computes the full length correlation of two vectors of fractional data values.
   - DFR1_dfr16CFFT -The method computes an in place, radix-2, complex, decimation-in-time, (DIT), forward Fast Fourier 
                Transform function for a vector of complex fractional data values.   Prior to any call to cfft, the CFFT data 
                structure referred to by the first parameter pCFFT must be allocated and initialized. This allocation and 
                initialization can be done either statically by declaring a dfr16_tCFFTStruct data structure and then 
                initializing it with a call to dfr16CFFTInit, or dynamically by calling dfr16CFFTCreate.
   - DFR1_dfr16CFFTCreate -The method performs the initialization for an in place, radix-2, complex, decimation-in-time (DIT), 
                forward Fast Fourier Transform (FFT) function, cfft, using complex fractional data values. The function 
                cfftCreate allocates and initializes a data structure, which is used by cfft to preserve the FFT function’s 
                state between calls.
   - DFR1_dfr16CFFTDestroy -The method deallocates the data structure(s) initially allocated by cfftCreate.
   - DFR1_dfr16CFFTInit -The method performs the initialization for an in place, radix-2, complex, decimation-in-time (DIT), 
                forward Fast Fourier Transform (FFT) function, cfft, using complex fractional data values. Initializes the 
                function from a previously-allocated dfr16_tCFFTStruct data structure. Typically, the dfr16_tCFFTStruct data 
                structure is allocated statically by the caller prior to the cfftInit call. The cfftCreate function also uses 
                cfftInit to initialize the dfr16_tCFFTStruct that it dynamically allocates.
   - DFR1_dfr16CIFFT -The method computes an in place, radix-2, complex, decimation-in-time (DIT), inverse Fast Fourier 
                Transform function for a vector of complex fractional data values.   Prior to any call to cifft, the CFFT data 
                structure referred to by the first parameter pCIFFT must be allocated and initialized. This allocation and 
                initialization can be done either statically by declaring a dfr16_tCFFTStruct data structure and then 
                initializing it with a call to dfr16CIFFTInit, or dynamically by calling dfr16CIFFTCreate.
   - DFR1_dfr16CIFFTCreate -The method performs the initialization for an in place, radix-2, complex, decimation-in-time (DIT), 
                inverse Fast Fourier Transform, (IFFT), using complex fractional data values. The function cifftCreate 
                allocates and initializes a data structure, which is used by cifft to preserve the IFFT function’s state 
                between calls.
   - DFR1_dfr16CIFFTDestroy -The method deallocates the data structure (s) initially allocated by cifftCreate.
   - DFR1_dfr16CIFFTInit -The method performs the initialization for an in place, radix-2, complex, decimation-in-time (DIT), 
                inverse Fast Fourier Transform, (IFFT), using complex fractional data values. Initializes the function from a 
                previously-allocated dfr16_tCFFTStruct data structure. Typically, the dfr16_tCFFTStruct data structure is 
                allocated statically by the caller prior to the cifftInit call. The cifftCreate function also uses cifftInit to 
                initialize allocate the dfr16_tCFFTStruct dynamically.
   - DFR1_dfr16RFFT -The method computes an in place, radix-2, real, decimation-in-time (DIT) forward Fast Fourier Transform 
                function for a vector of fractional data values.   Prior to any call to rfft, the RFFT data structure referred 
                to by the first parameter pRFFT must be allocated and initialized. This allocation and initialization can be 
                done either statically by declaring a dfr16_tRFFTStruct data structure and then initializing it with a call to 
                dfr16RFFTInit, or dynamically by calling dfr16RFFTCreate.
   - DFR1_dfr16RFFTCreate -The method performs the initialization for an in place, radix-2, real, decimation-in-time, (DIT), 
                forward Fast Fourier Transform, (FFT), function using fractional data values. The function rfftCreate allocates 
                and initializes a data structure, which is used by rfft to preserve the FFT function’s state between calls.
   - DFR1_dfr16RFFTDestroy -The method deallocates the data structure(s) initially allocated by rfftCreate.
   - DFR1_dfr16RFFTInit -The method performs the initialization for an in place, radix-2, real, decimation-in-time (DIT), 
                forward Fast Fourier Transform (FFT) function, rfft, using complex fractional data values. Initializes the 
                function from a previously allocated dfr16_tRFFTStruct data structure. Typically, the dfr16_tRFFTStruct data 
                structure is allocated statically by the caller prior to the rfftInit call. The rfftCreate function also uses 
                rfftInit to initialize the dfr16_tRFFTStruct that it dynamically allocates.
   - DFR1_dfr16RIFFT -The method computes an in place, radix-2, decimation-in-time, (DIT), inverse Fast Fourier Transform 
                function for a structure of complex data values.   Prior to any call to rifft, the RFFT data structure referred 
                to by the first parameter pRIFFT must be allocated and initialized. This allocation and initialization can be 
                done either statically by declaring a dfr16_tRFFTStruct data structure and then initializing it with a call to 
                dfr16RIFFTInit, or dynamically by calling dfr16RIFFTCreate.
   - DFR1_dfr16RIFFTCreate -The method performs the initialization for an in place, inverse real Fast Fourier Transform, (IFFT),
                function using fractional data values. The function rifftCreate allocates and initializes a data structure, 
                which is used by rifft to preserve the FFT function’s state between calls.
   - DFR1_dfr16RIFFTDestroy -The method deallocates the data structure(s) initially allocated by rifftCreate.
   - DFR1_dfr16RIFFTInit -The method performs the initialization for an in place, radix-2, real, decimation-in-time (DIT), 
                forward Fast Fourier Transform (FFT) function, rifft, using complex fractional data values. Initializes the 
                function from a previously allocated dfr16_tRIFFTStruct data structure. Typically, the dfr16_tRIFFTStruct data 
                structure is allocated statically by the caller prior to the rifftInit call. The rifftCreate function also uses 
                rifftInit to initialize the dfr16_tRIFFTStruct that it dynamically allocates.
   - DFR1_dfr16Cbitrev -The method bit-reverses the position of n complex data elements in the input vector, pointed to by pX. 
                The cbitrev function is used to convert normal, (linear), order complex vectors to bit-reversed complex vectors,
                and vice-versa, for use in Fast Fourier Transform functions.

Module "MEM1"      (bean DSP_MEM)
   - MEM1_memCallocEM -The memCallocEM function dynamically allocates an array with elements initialized to zero. The 
                memCallocEM function first tries to reallocate the memory from the external memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memCallocIM -The memCallocIM function dynamically allocates an array with elements initialized to zero. The 
                memCallocIM function first tries to reallocate the memory from the internal memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memFreeEM -The memFreeEM function deallocates a memory block in external memory that previously had been dynamically 
                allocated with the routine memMallocEM. For example see <Typical Usage > page.
   - MEM1_memFreeIM -The memFreeIM function deallocates a memory block in internal memory that previously had been dynamically 
                allocated with the routine memMallocIM. For example see <Typical Usage > page.
   - MEM1_memIsAligned -The memIsAligned function checks the address of a memory block to determine whether it is properly 
                aligned to use modulo addressing. For example see <Typical Usage > page.
   - MEM1_memIsEM -The memIsEM function checks the address of a memory block to determine whether it is in internal memory or 
                external memory. For example see <Typical Usage > page.
   - MEM1_memIsIM -The memIsIM function checks the address of a memory block to determine whether it is in internal memory or 
                external memory. For example see <Typical Usage > page.
   - MEM1_memMallocAlignedEM -The memMallocAlignedEM function allocates dynamic memory of the specified size from the memory 
                partitions and aligns the memory to use modulo addressing. The function memMallocAlignedEM first tries to 
                allocate the memory, properly aligned, from the external memory partition. However, if space is insufficient in 
                the external memory partition to satisfy the dynamic memory allocation, or if the memory request cannot be 
                properly aligned, memMallocAlignedEM then tries the allocation from the internal memory partition. If 
                memMallocAlignedEM cannot allocate an aligned buffer from either partition, it calls memMallocEM to try to 
                allocate a buffer of the correct size without the proper alignment. For example see <Typical Usage > page.
   - MEM1_memMallocAlignedIM -The memMallocAlignedIM function allocates dynamic memory of the specified size from the memory 
                partitions and aligns the memory properly to use modulo addressing. The function memMallocAlignedIM first tries 
                to allocate the memory, properly aligned, from the internal memory partition. However, if not enough space 
                exists in the internal memory partition to satisfy the dynamic memory allocation, or if the memory request 
                cannot be properly aligned, memMallocAlignedIM then tries the allocation from the external memory partition. If 
                memMallocAlignedIM cannot allocate an aligned buffer from either partition, it calls memMallocIM to try to 
                allocate a buffer of the correct size without the proper alignment. For example see <Typical Usage > page.
   - MEM1_memMallocEM -The memMallocEM function allocates dynamic memory of the specified size from the memory partitions. The 
                function memMallocEM first tries to allocate the memory from the external memory partition. However, if not 
                enough space exists in the external memory partition to satisfy the dynamic memory allocation, memMallocEM then 
                tries the allocation from the internal memory partition. For example see <Typical Usage > page.
   - MEM1_memMallocIM -The memMallocIM function allocates dynamic memory of the specified size from the memory partitions. The 
                function memMallocIM first tries to allocate the memory from the internal memory partition. However, if not 
                enough space exists in the internal memory partition to satisfy the dynamic memory allocation, memMallocIM then 
                tries the allocation from the external memory partition. For example see <Typical Usage > page.
   - MEM1_memReallocEM -The memReallocEM function dynamically reallocates and resizes a memory buffer to the specified size 
                from the memory partitions. The function memReallocEM first tries to reallocate the memory from the external 
                memory partition. However, if not enough space exists in the external memory partition to satisfy the dynamic 
                memory allocation, memReallocEM then tries the allocation from the internal memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memReallocIM -The memReallocIM function dynamically reallocates and resizes a memory buffer to the specified size 
                from the memory partitions. The function memReallocIM first tries to reallocate the memory from the internal 
                memory partition. However, if not enough space exists in the internal memory partition to satisfy the dynamic 
                memory allocation, memReallocIM then tries the allocation from the external memory partition For example see 
                <Typical Usage > page.
   - MEM1_memMemcpy -The memcpy routine copies characters between memory buffers For example see <Typical Usage > page.
   - MEM1_memMemset -The memset function sets user specified number of bytes in memory to a specific character For example see 
                <Typical Usage > page.
   - MEM1_memMemsetP -The memset function sets user specified number of bytes in 'P' memory to a specific character
   - MEM1_memCopyPtoX -The memCopyPtoX copies a block of data from the P (program) data memory to the X data memory. The 
                memCopyPtoX executes the specific instructions required to read data from program P data memory, as opposed to 
                X data. For example see <Typical Usage > page.
   - MEM1_memCopyXtoP -The memCopyXtoP copies a block of data from the X data memory to the P (program) data memory. The 
                memCopyXtoP executes the specific instructions required to write data to program P data memory, as opposed to X 
                data. For example see <Typical Usage > page.
   - MEM1_memCopyPtoP -The memCopyPtoP copies a block of data from the P (program) data memory to the P data memory. The 
                memCopyPtoP executes the specific instructions required to read data from program P data memory.
   - MEM1_memReadP16 -The function memReadP16 reads a 16-bit word from the program data (P data), address space. The memReadP16 
                executes the specific instructions to reference program P data, as opposed to X data. For example see <Typical 
                Usage > page.
   - MEM1_memReadP32 -The function memReadP32 reads a 32-bit word from the program data (P data) address space. The memReadP32 
                executes the specific instructions to reference program P data, as opposed to X data. For example see <Typical 
                Usage > page.
   - MEM1_memWriteP16 -The memWriteP16 function writes a 16-bit value into the program data, (P data), address space. The 
                memWriteP16 executes the specific instructions required to write to program (P) data, as opposed to X data. For 
                example see <Typical Usage > page.
   - MEM1_memWriteP32 -The memWriteP32 function writes a 32-bit value into the program data, (P data), address space. The 
                memWriteP32 executes specific instructions required to write to program P data, as opposed to X data. For 
                example see <Typical Usage > page.

Module "BADGEI2C"  (bean InternalI2C)
   - BADGEI2C_Enable -Enables I2C bean. Events may be generated ("DisableEvent"/"EnableEvent").
   - BADGEI2C_Disable -Disables I2C bean. No events will be generated.
   - BADGEI2C_SendBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SlaveSelect10" method or in bean 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is detectable by 
                means of events (OnTransmitData, OnError or OnArbitLost). Data to be send is not copied to an internal buffer 
                and remains in the original location. Therefore the content of the buffer should not be changed until the 
                transmission is complete. Event OnTransmitData can be used to detect the end of the transmission.  When working 
                as a SLAVE, this method writes a block of characters to the internal output slave buffer and then, after the 
                master starts the communication, to the I2C bus. If no character is ready for a transmission (internal output 
                slave buffer is empty), the "Empty character" will be sent (see "Empty character" property). In SLAVE mode the 
                data are copied to an internal buffer, if specified by "Output buffer size" property.
   - BADGEI2C_RecvBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads the block of characters from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in bean initialization section, "Target slave address init" property. If interrupt service is enabled 
                and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state of 
                transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of successful 
                transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, this 
                method reads a block of characters from the input slave buffer.
   - BADGEI2C_ClearRxBuf -This method clears all characters in internal slave input buffer. This method is not available for 
                the MASTER mode.
   - BADGEI2C_SelectSlave -This method selects a new slave for communication by its 7-bit slave address value. Any send or 
                receive method directs to or from selected device, until a new slave device is selected by this method. This 
                method is not available for the SLAVE mode.
   - BADGEI2C_SelectSpecialCommand -This method selects a special command. Any send or receive method directs to or from 
                selected device, until a new slave device is selected by this method. This method is not available for the 
                SLAVE mode. Certain commands may not be supported on a specific derivative, if IIC module does not have the 
                capability.
   - BADGEI2C_SetMode -This method sets actual operating mode of this bean. This method is available only for the MASTER - 
                SLAVE mode.  Note: If MASTER mode is selected as an operating mode, the device can still be selected as a slave 
                and receive/transmit data. However, it's necessary to select slave operating mode using SetMode( FALSE ) to 
                access this data.

Module "A0"        (bean BitIO)
   - A0_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations).

Module "A1"        (bean BitIO)
   - A1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations).

Module "A2"        (bean BitIO)
   - A2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations).

Module "Term1"     (bean Term)
   - Term1_SendStr -Send string to terminal.
   - Term1_SendNum -Send number to terminal.
   - Term1_SendChar -Send char to terminal.
   - Term1_MoveTo -Move cursor to position x, y. Range of coordinates can be from 1 to the size, which depends on the used 
                terminal. Position [1,1] represents the upper left corner.

Module "PORTAOUT"  (bean BitsIO)

Module "PORTB1OUT" (bean BitIO)

Module "PORTB5OUT" (bean BitIO)

Module "PORTCIN"   (bean BitIO)
   - PORTCIN_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations).

Module "PORTCOUT"  (bean BitsIO)

Module "PORTFOUT"  (bean BitIO)

Module "Cpu"       (bean Cpu)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.  For more information about the wait mode see this CPU documentation.  
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.  For more information about the stop mode see this CPU documentation.
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. Adding read wait states for external program memory can 
                cause delay extension as well. The method is independent on selected speed mode.

===================================================================================
